# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: environment
    type: string
    values:
      - dev
      - prod
      - qas
    default: prod  

stages:
  - stage: tfvalidate
    displayName: Terraform Validate
    jobs:
      - job: validate
        displayName: Terraform Validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              #terraformVersion: 'latest'
              terraformVersion: '1.5.4'

          - task: AWSShellScript@1
            displayName: 'Terraform Init'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/accounts/...' #workingDirectory
              awsCredentials: '...'
              regionName: 'us-east-1'
              scriptType: 'inline'
              inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform init'

          - task: AWSShellScript@1
            displayName: 'Terraform Validate'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/accounts/...'
              awsCredentials: '...' #Credentials for aws
              regionName: 'us-east-1'
              scriptType: 'inline'
              inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform validate'    

          - task: AWSShellScript@1
            displayName: 'Terraform Plan'
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/accounts/...'
              awsCredentials: 'aws-...'
              regionName: 'us-east-1'
              scriptType: 'inline'
              inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform plan'                               
            

  - stage: tfapply
    displayName: Terraform Apply (deploy IaC)  
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - deployment: 
        displayName: Terraform Apply
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:   

              - task: TerraformInstaller@1
                displayName: tfinstall
                inputs:
                  #terraformVersion: 'latest'
                  terraformVersion: '1.5.4'
              
              - task: AWSShellScript@1
                displayName: 'Terraform Init'
                inputs:
                  workingDirectory: '$(Build.SourcesDirectory)/accounts/...'
                  awsCredentials: 'aws...'
                  regionName: 'us-east-1'
                  scriptType: 'inline'
                  inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform init'

              - task: AWSShellScript@1
                displayName: 'Terraform Plan'
                inputs:
                  workingDirectory: '$(Build.SourcesDirectory)/accounts/...'
                  awsCredentials: 'aws...'
                  regionName: 'us-east-1'
                  scriptType: 'inline'
                  inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform plan'   

              - task: AWSShellScript@1
                displayName: 'Terraform Apply'
                inputs:
                  workingDirectory: '$(Build.SourcesDirectory)/accounts/...'
                  awsCredentials: 'aws...'
                  regionName: 'us-east-1'
                  scriptType: 'inline'
                  inlineScript: 'ls ; cd $(Build.SourcesDirectory)/accounts/... ; ls ; terraform apply -auto-approve'   
